<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>用C++编写的简易五子棋对弈系统</title>
    <url>/2024/04/29/blog%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<h1 id="简易五子棋对弈系统的C-程序编写"><a href="#简易五子棋对弈系统的C-程序编写" class="headerlink" title="简易五子棋对弈系统的C++程序编写"></a>简易五子棋对弈系统的C++程序编写</h1><p>我们开发了一款简易五子棋对弈系统的C++程序。程序使用线性数据结构实现核心算法，调用Qt库函数提供了创建、绘制棋盘、对弈功能以及胜负判别功能。棋手可以选择黑白棋，交替落子，系统监控棋盘局面并判断胜负。其次我们还考虑了人-机对弈接口，体现了OOP思想，使得代码复用和替换棋手为AI算法更加容易。</p>
<h2 id="Part-One-准备工作"><a href="#Part-One-准备工作" class="headerlink" title="Part One 准备工作"></a>Part One 准备工作</h2><h3 id="Qt-是什么"><a href="#Qt-是什么" class="headerlink" title="Qt 是什么"></a>Qt 是什么</h3><p>Qt是一款跨平台的C++应用程序开发框架，具有丰富的功能和易用的API。其核心原理是信号与槽机制，通过对象之间的通信实现灵活的事件处理。Qt特点包括高效的图形渲染、强大的UI开发、模块化设计、丰富的文档和社区支持。</p>
<p>在撰写C++程序之前，需要你在VS Studio中配置相关环境或者下载Qt Creator这款强大的IDE进行开发（强烈推荐后者）。</p>
<h3 id="C-的OOP（面向对象思想）"><a href="#C-的OOP（面向对象思想）" class="headerlink" title="C++的OOP（面向对象思想）"></a>C++的OOP（面向对象思想）</h3><p>面向对象编程（OOP）思想强调将程序分解为对象，每个对象都包含数据和操作数据的方法。通过继承、封装和多态，实现代码的模块化、可重用性和扩展性。在我的代码中，通过继承Qt库中原有的QMainWindow类，创建了登录界面类，五子棋类，对弈窗口类和结算界面类，调用了其中的ui界面函数，实现了功能的封装和代码的复用。</p>
<h3 id="C-项目文件"><a href="#C-项目文件" class="headerlink" title="C++项目文件"></a>C++项目文件</h3><p>C++项目和普通程序在组织结构上有显著区别。C++项目通常包含多个源文件，分为.h头文件和.cpp源文件。头文件通常包含类、函数声明以及外部变量的声明，而源文件则包含具体的实现代码。我们使用了extern关键字在头文件中声明外部变量，在多个源文件中共享棋盘内容，鼠标点位，以及指向五子棋类（以及结算界面，主界面类）的指针，通过这些指针可以在多个文件中调用已经生成的对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MainWindow *mainWindow;</span><br><span class="line">WUZI *zp;</span><br></pre></td></tr></table></figure>
<p>在按钮按下的事件中可以添加：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">login::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并显示 MainWindow 实例</span></span><br><span class="line">    mainWindow = <span class="keyword">new</span> <span class="built_in">MainWindow</span>();</span><br><span class="line">    zp=<span class="keyword">new</span> <span class="built_in">WUZI</span>();</span><br><span class="line">     zp-&gt;<span class="built_in">initialize</span>();</span><br><span class="line">    mainWindow-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过指针，可以更科学合理的实现对象的启用与传递。</p>
<h2 id="Part-Two-建立程序框架"><a href="#Part-Two-建立程序框架" class="headerlink" title="Part Two 建立程序框架"></a>Part Two 建立程序框架</h2><h3 id="五子棋类"><a href="#五子棋类" class="headerlink" title="五子棋类"></a>五子棋类</h3><p>在五子棋类中包含以下对象，帮助我进行五子棋程序后端的计算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WUZI</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> p[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">area</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>display函数</strong></p>
<ul>
<li>功能：打印当前棋盘状态。</li>
<li>实现：遍历棋盘数组，输出对应位置的棋子状态。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="type">void</span> <span class="title">WUZI::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            n = <span class="built_in">area</span>(i, j);</span><br><span class="line">            cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
这个代码主要用于前期在前端开发还没有完成的时候，检验后端五子棋程序的效果。</li>
</ul>
<p><strong>insert函数</strong></p>
<ul>
<li>功能：在指定位置落子。</li>
<li>实现：如果该位置无棋子，则在棋盘数组中相应位置放置对应的棋子。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="type">int</span> <span class="title">WUZI::insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = a;y = b;</span><br><span class="line">    <span class="keyword">if</span> (p[x][y] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;已有棋子，请重新落子&quot;</span> &lt;&lt; endl;</span><br><span class="line">        k1++;</span><br><span class="line">        count1--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p[x][y] = c;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>initialize函数</strong></p>
<ul>
<li>功能：初始化棋盘。</li>
<li>实现：将棋盘数组所有元素置为0，表示无棋子状态。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="type">void</span> <span class="title">WUZI::initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            p[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
值得说明的是，0表示无棋子，1表示黑棋，2表示白棋。他们都在p这个15×15二维数组中存储，可以直观表示棋盘状态<br><strong>evalue函数</strong>  </li>
<li>功能：评估当前棋盘状态，判断是否有玩家获胜。</li>
<li>实现：检查横向、纵向、斜向是否存在五子连珠的情况，若有则返回对应玩家编号，否则返回0。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="type">int</span> <span class="title">WUZI::evalue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查斜向的五子连珠</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">2</span>; k &lt; X1 - <span class="number">2</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">2</span>; r &lt; Y1 - <span class="number">2</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[k][r] != <span class="number">0</span> &amp;&amp; p[k - <span class="number">2</span>][r - <span class="number">2</span>] == p[k][r] &amp;&amp; p[k - <span class="number">1</span>][r - <span class="number">1</span>] == p[k][r] &amp;&amp; p[k + <span class="number">1</span>][r + <span class="number">1</span>] == p[k][r] &amp;&amp; p[k + <span class="number">2</span>][r + <span class="number">2</span>] == p[k][r]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[k][r] == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p[k][r] == <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p[k][r] != <span class="number">0</span> &amp;&amp; p[k + <span class="number">2</span>][r - <span class="number">2</span>] == p[k][r] &amp;&amp; p[k + <span class="number">1</span>][r - <span class="number">1</span>] == p[k][r] &amp;&amp; p[k - <span class="number">1</span>][r + <span class="number">1</span>] == p[k][r] &amp;&amp; p[k - <span class="number">2</span>][r + <span class="number">2</span>] == p[k][r]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[k][r] == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p[k][r] == <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查横向的五子连珠</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; X1; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">2</span>; r &lt; Y1 - <span class="number">2</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[k][r] != <span class="number">0</span> &amp;&amp; p[k][r - <span class="number">2</span>] == p[k][r] &amp;&amp; p[k][r - <span class="number">1</span>] == p[k][r] &amp;&amp; p[k][r + <span class="number">1</span>] == p[k][r] &amp;&amp; p[k][r + <span class="number">2</span>] == p[k][r]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[k][r] == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p[k][r] == <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查纵向的五子连珠</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">2</span>; k &lt; X1 - <span class="number">2</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; Y1; r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[k][r] != <span class="number">0</span> &amp;&amp; p[k - <span class="number">2</span>][r] == p[k][r] &amp;&amp; p[k - <span class="number">1</span>][r] == p[k][r] &amp;&amp; p[k + <span class="number">1</span>][r] == p[k][r] &amp;&amp; p[k + <span class="number">2</span>][r] == p[k][r]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[k][r] == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p[k][r] == <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到五子连珠，则返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
mainwindows.cpp中使用此函数返回值来判断输赢</li>
</ul>
<h3 id="登录界面和结算界面类"><a href="#登录界面和结算界面类" class="headerlink" title="登录界面和结算界面类"></a>登录界面和结算界面类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">login::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并显示 MainWindow 实例</span></span><br><span class="line">    mainWindow = <span class="keyword">new</span> <span class="built_in">MainWindow</span>();</span><br><span class="line">    zp=<span class="keyword">new</span> <span class="built_in">WUZI</span>();</span><br><span class="line">     zp-&gt;<span class="built_in">initialize</span>();</span><br><span class="line">    mainWindow-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用Qt特有的槽，将按钮事件（在登陆界面按下的“开始游戏”）指向此函数。实现，主窗口的打开，五子棋后端运算程序的执行与登录窗口的关闭。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Endgame::<span class="built_in">Endgame</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Endgame)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Endgame::paintEvent</span><span class="params">(QPaintEvent* event)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="comment">//反走样</span></span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">width</span>(),<span class="built_in">height</span>(),<span class="built_in">QPixmap</span>(<span class="string">&quot;:/blackwin.png&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Endgame::~<span class="built_in">Endgame</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Endgame::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ep-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同理，结算界面也相对简单，展示写有“黑棋获胜”的背景，并且关联“结束”按钮，彻底关闭结算窗口。</p>
<h3 id="主界面类"><a href="#主界面类" class="headerlink" title="主界面类"></a>主界面类</h3><p>主界面类可以说是本程序的重头戏。</p>
<p>首先需要包含程序需要的对象所在的源文件以及Qt所提供的众多库(后续的图形化编程需要使用这些库所包含的类和函数)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;login.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPaintEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QBrush&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPen&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Qt&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>由于Qt属于静态渲染，所以我们只需要在</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::paintEvent</span><span class="params">(QPaintEvent*)</span></span></span><br></pre></td></tr></table></figure>
<p>中包含主界面需要渲染的图像即可，每进行一步操作便重新渲染图像。</p>
<p>首先我们先绘制棋盘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"><span class="comment">//反走样</span></span><br><span class="line">painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">width</span>(),<span class="built_in">height</span>(),<span class="built_in">QPixmap</span>(<span class="string">&quot;:/fight.png&quot;</span>));</span><br><span class="line">painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//画棋盘</span></span><br><span class="line"><span class="comment">//背景上色</span></span><br><span class="line">QBrush brush;</span><br><span class="line">brush.<span class="built_in">setColor</span>(<span class="built_in">QColor</span>(<span class="number">213</span>, <span class="number">176</span>, <span class="number">141</span>));</span><br><span class="line">brush.<span class="built_in">setStyle</span>(Qt::SolidPattern);</span><br><span class="line">painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line"></span><br><span class="line"><span class="comment">//边框</span></span><br><span class="line">QPen pen = painter.<span class="built_in">pen</span>();</span><br><span class="line">painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line"><span class="comment">//大背景</span></span><br><span class="line">painter.<span class="built_in">drawRect</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">740</span>, <span class="number">740</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//棋盘网格线</span></span><br><span class="line">   pen.<span class="built_in">setColor</span>(Qt::black);</span><br><span class="line">   pen.<span class="built_in">setWidth</span>(<span class="number">1</span>);</span><br><span class="line">   painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">   <span class="comment">// 设置字体</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Arial&quot;</span>, <span class="number">12</span>, QFont::Bold)</span></span>;</span><br><span class="line">   painter.<span class="built_in">setFont</span>(font);</span><br><span class="line">   <span class="comment">// 设置文字颜色为蓝色</span></span><br><span class="line">   <span class="function">QPen <span class="title">textPen</span><span class="params">(Qt::black)</span></span>;</span><br><span class="line">   painter.<span class="built_in">setPen</span>(textPen);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)&#123;</span><br><span class="line">       painter.<span class="built_in">drawLine</span>(<span class="number">50</span>, <span class="number">50</span> + i * <span class="number">50</span>, <span class="number">750</span>, <span class="number">50</span> + i * <span class="number">50</span>);</span><br><span class="line">       painter.<span class="built_in">drawLine</span>(<span class="number">50</span> + <span class="number">50</span> * i, <span class="number">50</span>, <span class="number">50</span> + <span class="number">50</span> * i, <span class="number">750</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 绘制横坐标</span></span><br><span class="line">       painter.<span class="built_in">drawText</span>(<span class="number">35</span>, <span class="number">65</span> + i * <span class="number">50</span>, QString::<span class="built_in">number</span>(i + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 绘制纵坐标</span></span><br><span class="line">       painter.<span class="built_in">drawText</span>(<span class="number">46</span>+ i * <span class="number">50</span>, <span class="number">50</span>, <span class="built_in">QChar</span>(<span class="string">&#x27;A&#x27;</span> + i));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////</span></span><br><span class="line"><span class="comment">//画棋盘上面的五个黑点</span></span><br><span class="line">    brush.<span class="built_in">setColor</span>(Qt::black);</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line">    <span class="comment">//rect参数的意思是 左上角坐标为（195,195）大小为10*10</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">195</span>, <span class="number">195</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">595</span>, <span class="number">195</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">195</span>, <span class="number">595</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">595</span>, <span class="number">595</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="number">395</span>, <span class="number">395</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这些代码包含了棋盘的绘制，在主窗口用坐标的形式绘制棋盘，具体的实现过程可以参阅Qt的文档。</p>
<p>由于我们先前定义了表示棋盘的二维数组，并在五子棋类中加以改变，所以可以直接遍历数组绘制黑白棋即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//画棋子</span></span><br><span class="line">    brush.<span class="built_in">setStyle</span>(Qt::SolidPattern);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chessBoard[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                brush.<span class="built_in">setColor</span>(Qt::black);</span><br><span class="line">                painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line">                <span class="comment">//以Point为圆心画个圆</span></span><br><span class="line">                painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">50</span> + i * <span class="number">50</span>, <span class="number">50</span> + j * <span class="number">50</span>), <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(chessBoard[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                brush.<span class="built_in">setColor</span>(Qt::white);</span><br><span class="line">                painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line">                painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line">                painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">50</span> + i * <span class="number">50</span>, <span class="number">50</span> + j * <span class="number">50</span>), <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同时我们需要追踪鼠标的移动，并把鼠标坐标映射到相邻棋子上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseMoveEvent</span><span class="params">(QMouseEvent *e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获得鼠标在哪个网格的位置</span></span><br><span class="line">    mouseX = (e-&gt;<span class="built_in">x</span>() + <span class="number">25</span>) / <span class="number">50</span> - <span class="number">1</span>;</span><br><span class="line">    mouseY = (e-&gt;<span class="built_in">y</span>() + <span class="number">25</span>) / <span class="number">50</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且画出棋子实时的位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//在paintEvent中添加如下代码</span></span><br><span class="line"><span class="keyword">if</span>((mouseX &gt;= <span class="number">0</span> &amp;&amp; mouseX &lt;= <span class="number">14</span>) &amp;&amp; (mouseY &gt;= <span class="number">0</span> &amp;&amp; mouseY &lt;= <span class="number">14</span>) &amp;&amp; chessBoard[mouseX][mouseY] == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//第四个参数指的是透明度，255为全色，小于255可以看见图像后面的内容，等于0或大于255时效果一样，全透明</span></span><br><span class="line">     brush.<span class="built_in">setColor</span>(<span class="built_in">QColor</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">150</span>));</span><br><span class="line">     painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(mouseX * <span class="number">50</span> + <span class="number">50</span>, mouseY * <span class="number">50</span> + <span class="number">50</span>), <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>鼠标点击，落子的事件函数</strong></p>
<p>将落子坐标传入五子棋类insert函数，并且获取现有的二维数组。与此同时，判断输赢（输赢分出后结束当前窗口，进入结算界面）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在这里编写鼠标按下事件的处理代码</span></span><br><span class="line">    <span class="type">int</span> &amp;k=k1;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::LeftButton) &#123;</span><br><span class="line">        <span class="built_in">getXY</span>( X,Y);</span><br><span class="line">        count1++;</span><br><span class="line">        k=(k+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="comment">//黑棋</span></span><br><span class="line">            &#123;</span><br><span class="line">                zp-&gt;<span class="built_in">insert</span>(X, Y, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">1</span>)<span class="comment">//白棋</span></span><br><span class="line">            &#123;</span><br><span class="line">                zp-&gt;<span class="built_in">insert</span>(X, Y, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; ++j) &#123;</span><br><span class="line">                    chessBoard[i][j] = zp-&gt;p[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mainWindow-&gt;<span class="built_in">update</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(zp-&gt;<span class="built_in">evalue</span>()==<span class="number">1</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               mainWindow-&gt;<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">              ep=<span class="keyword">new</span> <span class="built_in">Endgame</span>();</span><br><span class="line">              ep-&gt;<span class="built_in">show</span>();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(zp-&gt;<span class="built_in">evalue</span>()==<span class="number">2</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               mainWindow-&gt;<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">              ew=<span class="keyword">new</span> <span class="built_in">whitewin</span>();</span><br><span class="line">              ew-&gt;<span class="built_in">show</span>();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    QMainWindow::<span class="built_in">mousePressEvent</span>(event);</span><br><span class="line">    <span class="built_in">check_equ</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一些其他功能的实现"><a href="#一些其他功能的实现" class="headerlink" title="一些其他功能的实现"></a>一些其他功能的实现</h4><p>棋盘满则平局</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::check_equ</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">   <span class="type">bool</span> hasZero = <span class="literal">false</span>; <span class="comment">// 标记是否存在0</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 遍历二维数组board</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (chessBoard[i][j] == <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               hasZero = <span class="literal">true</span>; <span class="comment">// 发现0,设置标记</span></span><br><span class="line">               <span class="keyword">break</span>; <span class="comment">// 可以提前终止内层循环</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (hasZero)</span><br><span class="line">           <span class="keyword">break</span>; <span class="comment">// 可以提前终止外层循环</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果没有0,执行cout</span></span><br><span class="line">   <span class="keyword">if</span> (!hasZero)</span><br><span class="line">   &#123;</span><br><span class="line">       mainWindow-&gt;<span class="built_in">close</span>();</span><br><span class="line">        <span class="comment">//平局</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示总手数及下一手</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//画总手数</span></span><br><span class="line">    QString countStr = <span class="built_in">QString</span>(<span class="string">&quot;总手数: %1&quot;</span>).<span class="built_in">arg</span>(count1);</span><br><span class="line">        painter.<span class="built_in">drawText</span>(<span class="number">800</span>, <span class="number">70</span>, countStr);</span><br><span class="line">    QString countStr2 = <span class="built_in">QString</span>(<span class="string">&quot;下一手：&quot;</span>).<span class="built_in">arg</span>(count1);</span><br><span class="line">        painter.<span class="built_in">drawText</span>(<span class="number">800</span>, <span class="number">98</span>, countStr2);</span><br><span class="line">    <span class="type">char</span> xChar = <span class="string">&#x27;A&#x27;</span> + X ;</span><br><span class="line">    <span class="function">QString <span class="title">xStr</span><span class="params">(xChar)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>made by 任子昂</p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
